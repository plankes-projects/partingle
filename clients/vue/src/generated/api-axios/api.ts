/// <reference types="node"/>
// tslint:disable
/**
 * My API
 * API for the app.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface House
 */
export interface House {
    /**
     * 
     * @type {Array<Room>}
     * @memberof House
     */
    rooms?: Array<Room>;
    /**
     * 
     * @type {Array<User>}
     * @memberof House
     */
    users?: Array<User>;
    /**
     * This defined the used house layout.
     * @type {number}
     * @memberof House
     */
    houseId?: number;
    /**
     * 
     * @type {string}
     * @memberof House
     */
    joinToken?: string;
}
/**
 * 
 * @export
 * @interface InitialData
 */
export interface InitialData {
    /**
     * The token of the user.
     * @type {string}
     * @memberof InitialData
     */
    userToken?: string;
    /**
     * The uuid of the user.
     * @type {string}
     * @memberof InitialData
     */
    userUuid?: string;
    /**
     * This will be set on a create call. You can use this token to login as admin in case you lose your client.
     * @type {string}
     * @memberof InitialData
     */
    houseRecoverToken?: string;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * The room the user is in.
     * @type {number}
     * @memberof Location
     */
    roomId?: number;
    /**
     * x-achsis.
     * @type {number}
     * @memberof Location
     */
    x?: number;
    /**
     * y-achsis.
     * @type {number}
     * @memberof Location
     */
    y?: number;
}
/**
 * The room id and the room token. The room token is used for the conference call.
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    roomId?: number;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    token?: string;
}
/**
 * All data needed to sync a user with other users.
 * @export
 * @interface User
 */
export interface User {
    /**
     * Flag to mark if the user is accepted to the house or not.
     * @type {boolean}
     * @memberof User
     */
    accepted?: boolean;
    /**
     * Flag to mark if the user is a admin.
     * @type {boolean}
     * @memberof User
     */
    admin?: boolean;
    /**
     * Flag to mark if the user is a super admin / the house creater.
     * @type {boolean}
     * @memberof User
     */
    superAdmin?: boolean;
    /**
     * A json with client generic data. eg. we can send avatar data in here.
     * @type {string}
     * @memberof User
     */
    genericClientData?: string;
    /**
     * The uuid of the user.
     * @type {string}
     * @memberof User
     */
    uuid?: string;
    /**
     * 
     * @type {Location}
     * @memberof User
     */
    location?: Location;
}

/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns pong.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the version of the API endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns pong.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await GeneralApiAxiosParamCreator(configuration).pingGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the version of the API endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await GeneralApiAxiosParamCreator(configuration).versionGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns pong.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options?: any): AxiosPromise<string> {
            return GeneralApiFp(configuration).pingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the version of the API endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: any): AxiosPromise<string> {
            return GeneralApiFp(configuration).versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
    /**
     * 
     * @summary Returns pong.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public pingGet(options?: any) {
        return GeneralApiFp(this.configuration).pingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the version of the API endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public versionGet(options?: any) {
        return GeneralApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * HouseApi - axios parameter creator
 * @export
 */
export const HouseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Open the door for the new user.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseAcceptGet: async (token: string, targetUserUuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling houseAcceptGet.');
            }
            // verify required parameter 'targetUserUuid' is not null or undefined
            if (targetUserUuid === null || targetUserUuid === undefined) {
                throw new RequiredError('targetUserUuid','Required parameter targetUserUuid was null or undefined when calling houseAcceptGet.');
            }
            const localVarPath = `/house/accept`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (targetUserUuid !== undefined) {
                localVarQueryParameter['targetUserUuid'] = targetUserUuid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new house.
         * @param {number} houseId The id of the house layout to create.
         * @param {number} numOfRooms The server will generate this amount of rooms.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseCreateGet: async (houseId: number, numOfRooms: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'houseId' is not null or undefined
            if (houseId === null || houseId === undefined) {
                throw new RequiredError('houseId','Required parameter houseId was null or undefined when calling houseCreateGet.');
            }
            // verify required parameter 'numOfRooms' is not null or undefined
            if (numOfRooms === null || numOfRooms === undefined) {
                throw new RequiredError('numOfRooms','Required parameter numOfRooms was null or undefined when calling houseCreateGet.');
            }
            const localVarPath = `/house/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (houseId !== undefined) {
                localVarQueryParameter['houseId'] = houseId;
            }

            if (numOfRooms !== undefined) {
                localVarQueryParameter['numOfRooms'] = numOfRooms;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Makes a user to an admin.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseGiveAdminGet: async (token: string, targetUserUuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling houseGiveAdminGet.');
            }
            // verify required parameter 'targetUserUuid' is not null or undefined
            if (targetUserUuid === null || targetUserUuid === undefined) {
                throw new RequiredError('targetUserUuid','Required parameter targetUserUuid was null or undefined when calling houseGiveAdminGet.');
            }
            const localVarPath = `/house/giveAdmin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (targetUserUuid !== undefined) {
                localVarQueryParameter['targetUserUuid'] = targetUserUuid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join a house.
         * @param {string} joinToken The id of the invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseJoinGet: async (joinToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'joinToken' is not null or undefined
            if (joinToken === null || joinToken === undefined) {
                throw new RequiredError('joinToken','Required parameter joinToken was null or undefined when calling houseJoinGet.');
            }
            const localVarPath = `/house/join`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (joinToken !== undefined) {
                localVarQueryParameter['joinToken'] = joinToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kicks a user from the house.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseKickGet: async (token: string, targetUserUuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling houseKickGet.');
            }
            // verify required parameter 'targetUserUuid' is not null or undefined
            if (targetUserUuid === null || targetUserUuid === undefined) {
                throw new RequiredError('targetUserUuid','Required parameter targetUserUuid was null or undefined when calling houseKickGet.');
            }
            const localVarPath = `/house/kick`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (targetUserUuid !== undefined) {
                localVarQueryParameter['targetUserUuid'] = targetUserUuid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Used to recover a house in case the admin computer died.
         * @param {string} recoverToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseRecoverGet: async (recoverToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'recoverToken' is not null or undefined
            if (recoverToken === null || recoverToken === undefined) {
                throw new RequiredError('recoverToken','Required parameter recoverToken was null or undefined when calling houseRecoverGet.');
            }
            const localVarPath = `/house/recover`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recoverToken !== undefined) {
                localVarQueryParameter['recoverToken'] = recoverToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove admin privileges from a user.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseRemoveAdminGet: async (token: string, targetUserUuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling houseRemoveAdminGet.');
            }
            // verify required parameter 'targetUserUuid' is not null or undefined
            if (targetUserUuid === null || targetUserUuid === undefined) {
                throw new RequiredError('targetUserUuid','Required parameter targetUserUuid was null or undefined when calling houseRemoveAdminGet.');
            }
            const localVarPath = `/house/removeAdmin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (targetUserUuid !== undefined) {
                localVarQueryParameter['targetUserUuid'] = targetUserUuid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restes the inviteToken of a house. You get the new token as response and it is also present in the sync call.
         * @param {string} token The token of the user who triggres this action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseResetInviteLinkGet: async (token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling houseResetInviteLinkGet.');
            }
            const localVarPath = `/house/resetInviteLink`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends own user info and retrieves all user information of the house if possible.
         * @param {string} token The token of the user who triggres this action.
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseSyncPost: async (token: string, user: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling houseSyncPost.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling houseSyncPost.');
            }
            const localVarPath = `/house/sync`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HouseApi - functional programming interface
 * @export
 */
export const HouseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Open the door for the new user.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async houseAcceptGet(token: string, targetUserUuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HouseApiAxiosParamCreator(configuration).houseAcceptGet(token, targetUserUuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a new house.
         * @param {number} houseId The id of the house layout to create.
         * @param {number} numOfRooms The server will generate this amount of rooms.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async houseCreateGet(houseId: number, numOfRooms: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitialData>> {
            const localVarAxiosArgs = await HouseApiAxiosParamCreator(configuration).houseCreateGet(houseId, numOfRooms, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Makes a user to an admin.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async houseGiveAdminGet(token: string, targetUserUuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HouseApiAxiosParamCreator(configuration).houseGiveAdminGet(token, targetUserUuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Join a house.
         * @param {string} joinToken The id of the invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async houseJoinGet(joinToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitialData>> {
            const localVarAxiosArgs = await HouseApiAxiosParamCreator(configuration).houseJoinGet(joinToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Kicks a user from the house.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async houseKickGet(token: string, targetUserUuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HouseApiAxiosParamCreator(configuration).houseKickGet(token, targetUserUuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Used to recover a house in case the admin computer died.
         * @param {string} recoverToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async houseRecoverGet(recoverToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitialData>> {
            const localVarAxiosArgs = await HouseApiAxiosParamCreator(configuration).houseRecoverGet(recoverToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove admin privileges from a user.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async houseRemoveAdminGet(token: string, targetUserUuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HouseApiAxiosParamCreator(configuration).houseRemoveAdminGet(token, targetUserUuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Restes the inviteToken of a house. You get the new token as response and it is also present in the sync call.
         * @param {string} token The token of the user who triggres this action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async houseResetInviteLinkGet(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await HouseApiAxiosParamCreator(configuration).houseResetInviteLinkGet(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sends own user info and retrieves all user information of the house if possible.
         * @param {string} token The token of the user who triggres this action.
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async houseSyncPost(token: string, user: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<House>> {
            const localVarAxiosArgs = await HouseApiAxiosParamCreator(configuration).houseSyncPost(token, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HouseApi - factory interface
 * @export
 */
export const HouseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Open the door for the new user.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseAcceptGet(token: string, targetUserUuid: string, options?: any): AxiosPromise<void> {
            return HouseApiFp(configuration).houseAcceptGet(token, targetUserUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new house.
         * @param {number} houseId The id of the house layout to create.
         * @param {number} numOfRooms The server will generate this amount of rooms.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseCreateGet(houseId: number, numOfRooms: number, options?: any): AxiosPromise<InitialData> {
            return HouseApiFp(configuration).houseCreateGet(houseId, numOfRooms, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Makes a user to an admin.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseGiveAdminGet(token: string, targetUserUuid: string, options?: any): AxiosPromise<void> {
            return HouseApiFp(configuration).houseGiveAdminGet(token, targetUserUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join a house.
         * @param {string} joinToken The id of the invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseJoinGet(joinToken: string, options?: any): AxiosPromise<InitialData> {
            return HouseApiFp(configuration).houseJoinGet(joinToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kicks a user from the house.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseKickGet(token: string, targetUserUuid: string, options?: any): AxiosPromise<void> {
            return HouseApiFp(configuration).houseKickGet(token, targetUserUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Used to recover a house in case the admin computer died.
         * @param {string} recoverToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseRecoverGet(recoverToken: string, options?: any): AxiosPromise<InitialData> {
            return HouseApiFp(configuration).houseRecoverGet(recoverToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove admin privileges from a user.
         * @param {string} token The token of the user who triggres this action.
         * @param {string} targetUserUuid The token of the user this action is applied on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseRemoveAdminGet(token: string, targetUserUuid: string, options?: any): AxiosPromise<void> {
            return HouseApiFp(configuration).houseRemoveAdminGet(token, targetUserUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restes the inviteToken of a house. You get the new token as response and it is also present in the sync call.
         * @param {string} token The token of the user who triggres this action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseResetInviteLinkGet(token: string, options?: any): AxiosPromise<string> {
            return HouseApiFp(configuration).houseResetInviteLinkGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sends own user info and retrieves all user information of the house if possible.
         * @param {string} token The token of the user who triggres this action.
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        houseSyncPost(token: string, user: User, options?: any): AxiosPromise<House> {
            return HouseApiFp(configuration).houseSyncPost(token, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HouseApi - object-oriented interface
 * @export
 * @class HouseApi
 * @extends {BaseAPI}
 */
export class HouseApi extends BaseAPI {
    /**
     * 
     * @summary Open the door for the new user.
     * @param {string} token The token of the user who triggres this action.
     * @param {string} targetUserUuid The token of the user this action is applied on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseApi
     */
    public houseAcceptGet(token: string, targetUserUuid: string, options?: any) {
        return HouseApiFp(this.configuration).houseAcceptGet(token, targetUserUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new house.
     * @param {number} houseId The id of the house layout to create.
     * @param {number} numOfRooms The server will generate this amount of rooms.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseApi
     */
    public houseCreateGet(houseId: number, numOfRooms: number, options?: any) {
        return HouseApiFp(this.configuration).houseCreateGet(houseId, numOfRooms, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Makes a user to an admin.
     * @param {string} token The token of the user who triggres this action.
     * @param {string} targetUserUuid The token of the user this action is applied on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseApi
     */
    public houseGiveAdminGet(token: string, targetUserUuid: string, options?: any) {
        return HouseApiFp(this.configuration).houseGiveAdminGet(token, targetUserUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Join a house.
     * @param {string} joinToken The id of the invite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseApi
     */
    public houseJoinGet(joinToken: string, options?: any) {
        return HouseApiFp(this.configuration).houseJoinGet(joinToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Kicks a user from the house.
     * @param {string} token The token of the user who triggres this action.
     * @param {string} targetUserUuid The token of the user this action is applied on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseApi
     */
    public houseKickGet(token: string, targetUserUuid: string, options?: any) {
        return HouseApiFp(this.configuration).houseKickGet(token, targetUserUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Used to recover a house in case the admin computer died.
     * @param {string} recoverToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseApi
     */
    public houseRecoverGet(recoverToken: string, options?: any) {
        return HouseApiFp(this.configuration).houseRecoverGet(recoverToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove admin privileges from a user.
     * @param {string} token The token of the user who triggres this action.
     * @param {string} targetUserUuid The token of the user this action is applied on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseApi
     */
    public houseRemoveAdminGet(token: string, targetUserUuid: string, options?: any) {
        return HouseApiFp(this.configuration).houseRemoveAdminGet(token, targetUserUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restes the inviteToken of a house. You get the new token as response and it is also present in the sync call.
     * @param {string} token The token of the user who triggres this action.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseApi
     */
    public houseResetInviteLinkGet(token: string, options?: any) {
        return HouseApiFp(this.configuration).houseResetInviteLinkGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sends own user info and retrieves all user information of the house if possible.
     * @param {string} token The token of the user who triggres this action.
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseApi
     */
    public houseSyncPost(token: string, user: User, options?: any) {
        return HouseApiFp(this.configuration).houseSyncPost(token, user, options).then((request) => request(this.axios, this.basePath));
    }

}


